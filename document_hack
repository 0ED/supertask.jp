Parsing
ここではParsing（構文解析）の方法を紹介する。読む対象者としては構文解析をやり始めたが、どういう方法が良いか迷っている方には良いと思う。

念のため説明しておくと、Parsingとはなんらかの文章（プログラミング言語、ログファイル、自然言語など）の文法を解析し、それらのトークンの関係性を木構造に直すことである。
一般的にParsingする場合、バッカス・ナウア記法(BNF)という文章の文法を定義する言語を用いて文法を設計する。
例えば、


BNFができ設計を終えれば実装に移るわけだが、実装に関しては「一から実装する方法」と「ツールを用いる方法」の2つがある。
ただし、両者にはそれぞれ以下のようなメリットとデメリットがある。
						メリット												デメリット
・一から実装			軽量な文法なら把握しやすく,すぐに書ける,実行速度が速い	大規模になると修正が困難.
・ツールを用いる		なれると楽,修正も楽,Programming言語の変換が相当楽		ツールを習得するのに時間がかかる, 実行速度が遅い
両者ともそんなに難しくはない。特に「一から実装する方法」は慣れれば、何も頭で考えずに実装できるようになるので安心してほしい。

まず, 一から実装であるが,





UnionFindTree
1.各木（ID=ルート）のエッジの数（閉路も含まれる）をカウントする
2.木のサイズ(ノード数)をUnionFindで調べる.木であるときのエッジ数（ノード数+1）をカウントする
1,2の結果からエッジ数が一致した場合はアンスカウントし，そうでない（閉路）の場合はアンスカウントしない.
